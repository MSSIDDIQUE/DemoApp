// Generated by Dagger (https://dagger.dev).
package com.baymax.demoapp.di;

import com.baymax.demoapp.api.ApiService;
import com.baymax.demoapp.ui.activity.main_activity.data.RemoteDataSource;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideRemoteDataSourceFactory implements Factory<RemoteDataSource> {
  private final AppModule module;

  private final Provider<ApiService> apiServiceProvider;

  public AppModule_ProvideRemoteDataSourceFactory(AppModule module,
      Provider<ApiService> apiServiceProvider) {
    this.module = module;
    this.apiServiceProvider = apiServiceProvider;
  }

  @Override
  public RemoteDataSource get() {
    return provideRemoteDataSource(module, apiServiceProvider.get());
  }

  public static AppModule_ProvideRemoteDataSourceFactory create(AppModule module,
      Provider<ApiService> apiServiceProvider) {
    return new AppModule_ProvideRemoteDataSourceFactory(module, apiServiceProvider);
  }

  public static RemoteDataSource provideRemoteDataSource(AppModule instance,
      ApiService apiService) {
    return Preconditions.checkNotNullFromProvides(instance.provideRemoteDataSource(apiService));
  }
}
