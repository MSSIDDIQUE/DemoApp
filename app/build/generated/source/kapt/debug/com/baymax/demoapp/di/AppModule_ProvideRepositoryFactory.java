// Generated by Dagger (https://dagger.dev).
package com.baymax.demoapp.di;

import com.baymax.demoapp.ui.activity.main_activity.data.RemoteDataSource;
import com.baymax.demoapp.ui.activity.main_activity.data.Repository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideRepositoryFactory implements Factory<Repository> {
  private final AppModule module;

  private final Provider<RemoteDataSource> remoteDataSourceProvider;

  public AppModule_ProvideRepositoryFactory(AppModule module,
      Provider<RemoteDataSource> remoteDataSourceProvider) {
    this.module = module;
    this.remoteDataSourceProvider = remoteDataSourceProvider;
  }

  @Override
  public Repository get() {
    return provideRepository(module, remoteDataSourceProvider.get());
  }

  public static AppModule_ProvideRepositoryFactory create(AppModule module,
      Provider<RemoteDataSource> remoteDataSourceProvider) {
    return new AppModule_ProvideRepositoryFactory(module, remoteDataSourceProvider);
  }

  public static Repository provideRepository(AppModule instance,
      RemoteDataSource remoteDataSource) {
    return Preconditions.checkNotNullFromProvides(instance.provideRepository(remoteDataSource));
  }
}
