// Generated by Dagger (https://dagger.dev).
package com.baymax.demoapp.di;

import com.baymax.demoapp.api.ApiService;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.converter.gson.GsonConverterFactory;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideGithubApiServicesFactory implements Factory<ApiService> {
  private final AppModule module;

  private final Provider<OkHttpClient> okHttpClientProvider;

  private final Provider<GsonConverterFactory> converterFactoryProvider;

  public AppModule_ProvideGithubApiServicesFactory(AppModule module,
      Provider<OkHttpClient> okHttpClientProvider,
      Provider<GsonConverterFactory> converterFactoryProvider) {
    this.module = module;
    this.okHttpClientProvider = okHttpClientProvider;
    this.converterFactoryProvider = converterFactoryProvider;
  }

  @Override
  public ApiService get() {
    return provideGithubApiServices(module, okHttpClientProvider.get(), converterFactoryProvider.get());
  }

  public static AppModule_ProvideGithubApiServicesFactory create(AppModule module,
      Provider<OkHttpClient> okHttpClientProvider,
      Provider<GsonConverterFactory> converterFactoryProvider) {
    return new AppModule_ProvideGithubApiServicesFactory(module, okHttpClientProvider, converterFactoryProvider);
  }

  public static ApiService provideGithubApiServices(AppModule instance, OkHttpClient okHttpClient,
      GsonConverterFactory converterFactory) {
    return Preconditions.checkNotNullFromProvides(instance.provideGithubApiServices(okHttpClient, converterFactory));
  }
}
